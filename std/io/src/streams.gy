// Copyright Jay Conrod. All rights reserved.
//
// This file is part of the Gypsum standard library. Use of this
// source code is governed by the 3-clause BSD license that can be
// found in the LICENSE.txt file.

import std.I8Array,
    List,
    utf8-to-string

public trait InputStream
  public abstract def close: unit
  public abstract def is-closed: boolean
  public abstract def read(buffer: I8Array, offset: i32, count: i32): i32


public final class FileInputStream <: InputStream
  private var fd: i32

  public def this(file: File) =
    fd = open-fd(file.to-string)

  public def this(path: String) =
    fd = open-fd(path.to-string)

  public override def close: unit =
    if (is-closed)
      return
    close-fd(fd)
    fd = -1i32
    {}

  public override def is-closed = fd < 0i32

  public override def read(buffer: I8Array, offset: i32, count: i32): i32 =
    if (is-closed)
      throw StreamClosedException()
    read-fd(fd, buffer, offset, count)

  private static native def open-fd(path: String): i32

  private static native def close-fd(fd: i32): unit

  private static native def read-fd(fd: i32, buffer: I8Array, offset: i32, count: i32): i32


class Chunk(buffer: I8Array, length: i32)

public def read-stream(stream: InputStream): I8Array =
  let chunks = List[Chunk]()
  var total-length = 0i32
  var done = false
  while (!done)
    let buffer = new(8192i32) I8Array()
    let length = stream.read(buffer, 0i32, buffer.length)
    if (length == 0i32)
      done = true
      {}
    else
      chunks.push(Chunk(buffer, length))
      total-length += length
      // TODO: check for overflow
      {}
  let full-buffer = new(total-length) I8Array()
  var chunk-index = 0i32
  var buffer-index = 0i32
  while (chunk-index < chunks.length)
    let chunk = chunks.get(chunk-index)
    var byte-index = 0i32
    while (byte-index < chunk.length)
      full-buffer.set(buffer-index, chunk.buffer.get(byte-index))
      buffer-index += 1i32
      byte-index += 1i32
    chunk-index += 1i32
  full-buffer

public def read-stream-as-string(stream: InputStream): String =
  let utf8-bytes = read-stream(stream)
  utf8-to-string(utf8-bytes)

public def read-file(file-name: String): I8Array =
  let stream = FileInputStream(file-name)
  try
    read-stream(stream)
  finally
    stream.close

public def read-file-as-string(file-name: String): String =
  let stream = FileInputStream(file-name)
  try
    read-stream-as-string(stream)
  finally
    stream.close
