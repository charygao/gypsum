// Copyright Jay Conrod. All rights reserved.
//
// This file is part of the Gypsum standard library. Use of this
// source code is governed by the 3-clause BSD license that can be
// found in the LICENSE.txt file.


let MIN-CAPACITY = 16i32
let MIN-EMPTY-RATIO = 0.25f32
let MIN-LIVE-RATIO = 0.1f32
let NOT-FOUND-INDEX = -1i32


abstract class Entry[static +K <: Hash[K], static +V]


final class EmptyEntryClass <: Entry[Nothing, Nothing]
let EMPTY-ENTRY = EmptyEntryClass()


final class DeletedEntryClass <: Entry[Nothing, Nothing]
let DELETED-ENTRY = DeletedEntryClass()


abstract class LiveEntry[static +K <: Hash[K], static V](key: K) <: Entry[K, V]


final class HashTable[static K <: Hash[K], static V] <: Iter[LiveEntry[K, V]]
  var live-element-count = 0i32
  var dead-element-count = 0i32

  arrayelements Entry[K, V], get-entry, set-entry, capacity

  def this =
    if (capacity < MIN-CAPACITY || (capacity & (capacity - 1i32)) != 0i32)
      throw IllegalArgumentException()
    var index = 0i32
    while (index < capacity)
      set-entry(index, EMPTY-ENTRY)
      index += 1i32

  def get-live-entry(index: i32): LiveEntry[K, V] =
    match (get-entry(index))
      case entry: LiveEntry[K, V] => entry
      case _ => throw AssertionException()

  def get(key: K): Option[LiveEntry[K, V]] =
    let index = lookup-index(key)
    if (index == NOT-FOUND-INDEX)
      None
    else
      Some[LiveEntry[K, V]](get-live-entry(index))

  def insert(entry: LiveEntry[K, V]): unit =
    let index = lookup-index-for-insert(entry.key)
    set-entry(index, entry)
    live-element-count += 1i32
    {}

  def remove(key: K): Option[LiveEntry[K, V]] =
    let index = lookup-index(key)
    if (index == NOT-FOUND-INDEX)
      None
    else
      let entry = get-live-entry(index)
      set-entry(index, DELETED-ENTRY)
      live-element-count -= 1i32
      dead-element-count += 1i32
      Some[LiveEntry[K, V]](entry)

  def empty-ratio: f32 =
    (capacity - live-element-count - dead-element-count).to-f32 / capacity.to-f32

  def live-ratio: f32 = live-element-count.to-f32 / capacity.to-f32

  def rehash(table: HashTable[K, V]): unit =
    let it = table.iter
    while (it.has-next)
      let entry = it.next
      insert(entry)

  override def iter = HashTableIterator[K, V](this)

  private def lookup-index-for-insert(key: K): i32 =
    let start-index = key.hash & capacity-mask
    var index = start-index
    var done = false
    while (!done)
      match (get-entry(index))
        case EMPTY-ENTRY => return index
        case DELETED-ENTRY => return index
        case _ =>
          index = (index + 1i32) & capacity-mask
          done = index == start-index
    throw AssertionException()

  private def lookup-index(key: K): i32 =
    let start-index = key.hash & capacity-mask
    var index = start-index
    var done = false
    while (!done)
      match (get-entry(index))
        case entry: LiveEntry[K, V] if entry.key == key => return index
        case EMPTY-ENTRY => return NOT-FOUND-INDEX
        case _ =>
          index = (index + 1i32) & capacity-mask
          done = index == start-index
    NOT-FOUND-INDEX

  private def capacity-mask = capacity - 1i32


final class HashTableIterator[
    static K <: Hash[K],
    static V
  ](
    table: HashTable[K, V]
  ) <: Iterator[LiveEntry[K, V]]

  private var index = advance-index(NOT-FOUND-INDEX)

  public override def has-next = index < table.capacity

  public override def next =
    if (!has-next)
      throw NoSuchElementException()
    let entry = table.get-live-entry(index)
    index = advance-index(index)
    entry

  private def advance-index(var index: i32) =
    index += 1i32
    while (index < table.capacity)
      match (table.get-entry(index))
        case _: LiveEntry[K, V] => return index
        case _ => {}
      index += 1i32
    index
