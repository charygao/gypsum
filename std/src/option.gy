// Copyright 2015-2016, Jay Conrod. All rights reserved.
//
// This file is part of the Gypsum standard library. Use of this
// source code is governed by the 3-clause BSD license that can be
// found in the LICENSE.txt file.

public abstract class Option[static +T] <: Iter[T]
  public abstract def is-defined: boolean
  public abstract def get: T
  public final override def iter: Iterator[T] = OptionIterator[T](this)


public class Some[static +T](value: T) <: Option[T]
  public override def is-defined = true
  public override def get = value
  public override def to-string = "Some(" + value.to-string + ")"

  public static def try-match(obj: Object): Option[Object] =
    match (obj)
      case some: Some[_] => some
      case _ => None

  public static def try-match(opt: Option[T]) = opt


class None-class <: Option[Nothing]
  public override def is-defined = false
  public override def get = throw Exception()
  public override def to-string = "None"


public let None: Option[Nothing] = None-class()


class OptionIterator[static T](private opt: Option[T]) <: Iterator[T]
  private var has-next- = opt.is-defined

  public override def has-next = has-next-

  public override def next =
    if (has-next-)
      has-next- = false
      opt.get
    else
      throw NoSuchElementException()
