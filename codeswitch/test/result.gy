// Copyright Jay Conrod. All rights reserved.

// This file is part of CodeSwitch. Use of this source code is governed by
// the 3-clause BSD license that can be found in the LICENSE.txt file.


import std.AssertionException, Err, I32, Ok, Result


def assert-true(b: boolean) =
  if (!b)
    throw AssertionException()


def assert-false(b: boolean) =
  if (b)
    throw AssertionException()


def assert-eq(expected: i32, actual: i32) =
  if (expected != actual)
    throw AssertionException()


def main =
  let ok: Result[I32, String] = Ok[I32](I32.of(42i32))
  assert-true(ok.is-ok)
  assert-eq(42i32, ok.to-opt.get.value)
  assert-eq(42i32, ok.get.value)
  match (ok)
    case Ok[I32](value) => assert-eq(42i32, value.value)
    case _ => throw AssertionException()

  let message = "something went wrong"
  let err: Result[I32, String] = Err[String](message)
  assert-false(err.is-ok)
  assert-false(err.to-opt.is-defined)
  assert-true(try
    err.get
    false
  catch (_: Exception) true)
  {}
  match (err)
    case Err[String](s) if s === message => {}
    case _ => throw AssertionException()
