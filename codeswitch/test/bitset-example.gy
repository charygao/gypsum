// Copyright Jay Conrod. All rights reserved.

// This file is part of CodeSwitch. Use of this source code is governed by
// the 3-clause BSD license that can be found in the LICENSE.txt file.


import std.IllegalArgumentException

final class BitSet
  private def this = {}

  static def create(max: i32) =
    let bytes-needed = (max + 7i32) / 8i32
    new(bytes-needed) BitSet

  def contains(n: i32) =
    if (in-range(n))
      let byte = get-byte(byte-index(n))
      (byte & bit-mask(bit-index(n))) != 0i8
    else
      false

  def add(n: i32) =
    if (!in-range(n))
      throw IllegalArgumentException()
    var byte = get-byte(byte-index(n))
    byte |= bit-mask(bit-index(n))
    set-byte(byte-index(n), byte)

  def remove(n: i32) =
    if (!in-range(n))
      throw IllegalArgumentException()
    var byte = get-byte(byte-index(n))
    byte &= ~bit-mask(bit-index(n))
    set-byte(byte-index(n), byte)

  private def in-range(n: i32) = n >= 0i32 && n / 8i32 < capacity
  private def byte-index(n: i32) = n / 8i32
  private def bit-index(n: i32) = (n % 8i32).to-i8
  private def bit-mask(ix: i8) = 1i8 << ix

  arrayelements i8,
      private get-byte,
      private set-byte,
      private capacity


def check(condition: boolean) =
  if (!condition)
    throw Exception()


def main =
  let set = BitSet.create(100i32)
  check(!set.contains(12i32))
  check(!set.contains(34i32))
  check(!set.contains(42i32))
  set.add(12i32)
  set.add(42i32)
  check(set.contains(12i32))
  check(!set.contains(34i32))
  check(set.contains(42i32))
  set.remove(12i32)
  check(!set.contains(12i32))
