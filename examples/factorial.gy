// This is a simple Gypsum program.
// See README.md for instructions for building and running.

// This program demonstrates two functions which calculate a factorial.

// This function uses an iterative method. It has one parameter, `n`. We define `n` using the
// `var` keyword, which allows us to re-assign it later.
def factorial-iterative(var n: i64) =
  // We declare a local variable with `var`. Again, this allows us to re-assign it.
  var p = 1

  // `while` loops are currently the only kind of loop Gypsum supports. A `while` loop has
  // a condition expression and a body expression. In this case, the body is a block expression,
  // which is denoted by indentation.
  while (n > 0)
    // Gypsum supports compound assignment to variables. Since the `*=` method is not defined
    // for the i64 type (64-bit signed integers), the `*` method is called instead, and the
    // result is assigned to left side.
    p *= n
    n -= 1

  // The last statement in a block expression determines the result of the whole expression.
  // So we return p just by naming it. `return` expressions are also allowed anywhere.
  p


// This function uses a recursive method. Recursive functions must have an explicit return
// type. The compiler will complain if you don't write one. Note that we don't need to use
// the `var` keyword when declaring the parameter `n`. Parameters are constant by default.
def factorial-recursive(n: i64): i64 =
  if (n == 0)
    1
  else
    // Gypsum doesn't support tail recursion yet, but will eventually.
    n * factorial-recursive(n - 1)


def main =
  // Here, we define local constants using `let` instead of `var`. `let` does not allows these
  // variables to be re-assigned. It is usually preferred over `var`.
  let n = 5
  let p-iter = factorial-iterative(n)
  let p-rec = factorial-recursive(n)

  // Numbers and other primitive values can be formatted as strings by calling the to-string
  // method. This can be called on literals too, e.g., `5.to-string`.
  print(n.to-string + "! is " + p-iter.to-string + " (computed iteratively)\n")
  print(n.to-string + "! is " + p-rec.to-string + " (computed recursively)\n")
